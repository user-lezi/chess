"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.load = void 0;
const renderer_1 = require("./app/renderer");
const declarations = __importStar(require("./options/declarations"));
const theme_1 = require("./theme/index.js");
const typedoc_1 = require("typedoc");
/**
 * The function that is called by TypeDoc to bootstrap the plugin. https://typedoc.org/guides/development/#plugins.
 *
 * Here we expose additional TypeDoc options and make some adjustments.
 *
 * This method is not intended to be consumed in any other context that via the `plugin` option.
 *
 * @ignore
 */
function load(app) {
    /**
     * ====================
     * 1. Bootstrap Options
     * ====================
     */
    /**
     * Iterate over declaration definitions and to the container.
     */
    Object.entries(declarations).forEach(([name, declaration]) => {
        app.options.addDeclaration({
            name,
            ...declaration,
        });
    });
    /**
     * =================================================
     * 2. Intercept and modify some TypeDoc core methods
     * =================================================
     *
     * Currently the TypeDoc {@link Renderer} class is quite coupled to the HTML theme so we override a couple of core methods.
     *
     * @todo Ideally there would be proper decoupling in the TypeDoc core between the {@link Application} and {@link Renderer} which requires further investigation.
     *
     */
    /**
     * Replace the default HTML theme the with the {@link MarkdownTheme}
     */
    Object.defineProperty(app.renderer, 'themes', {
        value: new Map([
            ['default', theme_1.MarkdownTheme],
        ]),
    });
    /**
     * Replace TypeDoc's {@link app.generateDocs} method with our own {@link generateDocs} method.
     */
    Object.defineProperty(app, 'generateDocs', { value: renderer_1.generateDocs });
    /**
     * Replace TypeDoc's {@link app.renderer.render} method with our own {@link render} method.
     */
    Object.defineProperty(app.renderer, 'render', {
        value: renderer_1.render,
    });
    /**
     * This is used to hook into the TypeDoc rendering system.
     */
    Object.defineProperty(app.renderer, 'markdownHooks', {
        value: new typedoc_1.EventHooks(),
    });
    /**
     * ============================
     * 3. Apply any other behaviour
     * ============================
     */
    /**
     * Currently options set for packages are only stored on the converter and are destroyed before being passed to the {@link Renderer}.
     *
     * By intercepting the package options set in the converter and storing them on the renderer we can use them later in the theme.
     *
     * @todo Ideally this functionality would be available in TypeDoc core - to investigate.
     */
    app.converter.on(typedoc_1.Converter.EVENT_RESOLVE_END, (context) => {
        if (app.options.packageDir) {
            (0, renderer_1.resolvePackages)(app, context, app.options.packageDir);
        }
    });
}
exports.load = load;
__exportStar(require("./public-api"), exports);
