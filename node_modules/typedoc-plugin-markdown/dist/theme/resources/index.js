"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.helpers = exports.partials = exports.templates = void 0;
const project_1 = require("./templates/project");
const read_me_1 = require("./templates/read-me");
const reflection_1 = require("./templates/reflection");
const comments_comment_1 = require("./partials/comments.comment");
const comments_commentParts_1 = require("./partials/comments.commentParts");
const container_body_1 = require("./partials/container.body");
const container_categories_1 = require("./partials/container.categories");
const container_groups_1 = require("./partials/container.groups");
const container_members_1 = require("./partials/container.members");
const member_accessor_1 = require("./partials/member.accessor");
const member_constructors_1 = require("./partials/member.constructors");
const member_declaration_1 = require("./partials/member.declaration");
const member_declarationTitle_1 = require("./partials/member.declarationTitle");
const member_enumMembersTable_1 = require("./partials/member.enumMembersTable");
const member_hierarchy_1 = require("./partials/member.hierarchy");
const member_indexSignature_1 = require("./partials/member.indexSignature");
const member_inheritance_1 = require("./partials/member.inheritance");
const member_memberTitle_1 = require("./partials/member.memberTitle");
const member_memberWithGroups_1 = require("./partials/member.memberWithGroups");
const member_parametersList_1 = require("./partials/member.parametersList");
const member_parametersTable_1 = require("./partials/member.parametersTable");
const member_propertiesTable_1 = require("./partials/member.propertiesTable");
const member_reference_1 = require("./partials/member.reference");
const member_reflectionFlags_1 = require("./partials/member.reflectionFlags");
const member_reflectionIndex_1 = require("./partials/member.reflectionIndex");
const member_signature_1 = require("./partials/member.signature");
const member_signatureParameters_1 = require("./partials/member.signatureParameters");
const member_signatureReturns_1 = require("./partials/member.signatureReturns");
const member_signatureTitle_1 = require("./partials/member.signatureTitle");
const member_sources_1 = require("./partials/member.sources");
const member_1 = require("./partials/member");
const member_typeAndParent_1 = require("./partials/member.typeAndParent");
const member_typeArguments_1 = require("./partials/member.typeArguments");
const member_typeDeclaration_1 = require("./partials/member.typeDeclaration");
const member_typeDeclarationList_1 = require("./partials/member.typeDeclarationList");
const member_typeDeclarationTable_1 = require("./partials/member.typeDeclarationTable");
const member_typeParametersList_1 = require("./partials/member.typeParametersList");
const member_typeParametersTable_1 = require("./partials/member.typeParametersTable");
const page_breadcrumbs_1 = require("./partials/page.breadcrumbs");
const page_footer_1 = require("./partials/page.footer");
const page_header_1 = require("./partials/page.header");
const page_packagesIndex_1 = require("./partials/page.packagesIndex");
const page_pageTitle_1 = require("./partials/page.pageTitle");
const type_array_1 = require("./partials/type.array");
const type_conditional_1 = require("./partials/type.conditional");
const type_index_access_1 = require("./partials/type.index-access");
const type_inferred_1 = require("./partials/type.inferred");
const type_intersection_1 = require("./partials/type.intersection");
const type_intrinsic_1 = require("./partials/type.intrinsic");
const type_literal_1 = require("./partials/type.literal");
const type_named_tuple_1 = require("./partials/type.named-tuple");
const type_query_1 = require("./partials/type.query");
const type_reference_1 = require("./partials/type.reference");
const type_reflection_declaration_1 = require("./partials/type.reflection.declaration");
const type_reflection_function_1 = require("./partials/type.reflection.function");
const type_reflection_1 = require("./partials/type.reflection");
const type_some_1 = require("./partials/type.some");
const type_tuple_1 = require("./partials/type.tuple");
const type_type_operator_1 = require("./partials/type.type-operator");
const type_union_1 = require("./partials/type.union");
const type_unknown_1 = require("./partials/type.unknown");
const get_declaration_comment_1 = require("./helpers/get-declaration-comment");
const get_declaration_type_1 = require("./helpers/get-declaration-type");
const get_flattened_declarations_1 = require("./helpers/get-flattened-declarations");
const get_hierarchy_type_1 = require("./helpers/get-hierarchy-type");
const get_keyword_1 = require("./helpers/get-keyword");
const get_modifier_1 = require("./helpers/get-modifier");
const get_parameter_default_value_1 = require("./helpers/get-parameter-default-value");
const get_property_default_value_1 = require("./helpers/get-property-default-value");
const get_return_type_1 = require("./helpers/get-return-type");
const is_group_kind_1 = require("./helpers/is-group-kind");
const templates = (context) => {
    return {
        /**
         * Template that maps to the root project reflection. This will be the index page / documentation root page.
         *
         */
        project: () => project_1.project.apply(context, []),
        /**
         * Template that specifically maps to the resolved readme file. This template is not used when 'readme' is set to 'none'.
         *
         */
        readme: () => read_me_1.readme.apply(context, []),
        /**
         * Template that maps to individual reflection models.
         *
         */
        reflection: () => reflection_1.reflection.apply(context, []),
    };
};
exports.templates = templates;
const partials = (context) => {
    return {
        /**
         *
         *
         * @category Comment Partials
         */
        comment: (model, options = {}) => comments_comment_1.comment.apply(context, [model, options]),
        /**
         *
         *
         * @category Comment Partials
         */
        commentParts: (model) => comments_commentParts_1.commentParts.apply(context, [model]),
        /**
         *
         *
         * @category Container Partials
         */
        body: (model, options) => container_body_1.body.apply(context, [model, options]),
        /**
         * Renders a collection of reflection categories.
         *
         * @category Container Partials
         */
        categories: (model, options) => container_categories_1.categories.apply(context, [model, options]),
        /**
         * Renders a collection of reflection groups.
         *
         * @category Container Partials
         */
        groups: (model, options) => container_groups_1.groups.apply(context, [model, options]),
        /**
         * Renders a collection of members.
         *
         * @category Container Partials
         */
        members: (model, options) => container_members_1.members.apply(context, [model, options]),
        /**
         * Renders an accessor member.
         *
         * @category Member Partials
         */
        accessor: (model, options) => member_accessor_1.accessor.apply(context, [model, options]),
        /**
         * Renders an constructor member.
         *
         * @category Member Partials
         */
        constructor: (model, options) => member_constructors_1.constructor.apply(context, [model, options]),
        /**
         * Renders a standard declaration member.
         *
         * @category Member Partials
         */
        declaration: (model, options = {
            headingLevel: 2,
            nested: false,
        }) => member_declaration_1.declaration.apply(context, [model, options]),
        /**
         * Remders a declaration title.
         *
         * @category Member Partials
         */
        declarationTitle: (model) => member_declarationTitle_1.declarationTitle.apply(context, [model]),
        /**
         * Renders enum members as a table.
         *
         * @category Member Partials
         */
        enumMembersTable: (model) => member_enumMembersTable_1.enumMembersTable.apply(context, [model]),
        /**
         *
         *
         * @category Member Partials
         */
        hierarchy: (model, options) => member_hierarchy_1.hierarchy.apply(context, [model, options]),
        /**
         * Renders an index signature block
         *
         * @category Member Partials
         */
        indexSignature: (model) => member_indexSignature_1.indexSignature.apply(context, [model]),
        /**
         * Renders an inheritance section.
         *
         * @category Member Partials
         */
        inheritance: (model, options) => member_inheritance_1.inheritance.apply(context, [model, options]),
        /**
         * Renders the main member title.
         *
         * @category Member Partials
         */
        memberTitle: (model) => member_memberTitle_1.memberTitle.apply(context, [model]),
        /**
         * Renders a top-level member that contains group and child members such as Classes, Interfaces and Enums.
         *
         * @category Member Partials
         */
        memberWithGroups: (model, options) => member_memberWithGroups_1.memberWithGroups.apply(context, [model, options]),
        /**
         *
         *
         * @category Member Partials
         */
        parametersList: (model) => member_parametersList_1.parametersList.apply(context, [model]),
        /**
         *
         *
         * @category Member Partials
         */
        parametersTable: (model) => member_parametersTable_1.parametersTable.apply(context, [model]),
        /**
     * Renders a collection of properties in a table.
    
    There is no association list partial for properties as these are handled as a standard list of members.
     *
     * @category Member Partials
     *
     */
        declarationsTable: (model, options) => member_propertiesTable_1.declarationsTable.apply(context, [model, options]),
        /**
         * Renders an reference member.
         *
         * @category Member Partials
         */
        referenceMember: (model) => member_reference_1.referenceMember.apply(context, [model]),
        /**
         * Renders the flags of a reflection.
         *
         * @category Member Partials
         */
        reflectionFlags: (model) => member_reflectionFlags_1.reflectionFlags.apply(context, [model]),
        /**
         * Renders the index section of a reflection.
         *
         * @category Member Partials
         */
        reflectionIndex: (model, options) => member_reflectionIndex_1.reflectionIndex.apply(context, [model, options]),
        /**
         * Renders a signature member.
         *
         * @category Member Partials
         */
        signature: (model, options) => member_signature_1.signature.apply(context, [model, options]),
        /**
         *
         *
         * @category Member Partials
         */
        signatureParameters: (model) => member_signatureParameters_1.signatureParameters.apply(context, [model]),
        /**
         *
         *
         * @category Member Partials
         */
        signatureReturns: (model, options) => member_signatureReturns_1.signatureReturns.apply(context, [model, options]),
        /**
         *
         *
         * @category Member Partials
         */
        signatureTitle: (model, options) => member_signatureTitle_1.signatureTitle.apply(context, [model, options]),
        /**
         *
         *
         * @category Member Partials
         */
        sources: (model, options) => member_sources_1.sources.apply(context, [model, options]),
        /**
         *
         *
         * @category Member Partials
         */
        member: (model, options) => member_1.member.apply(context, [model, options]),
        /**
         *
         *
         * @category Member Partials
         */
        typeAndParent: (model) => member_typeAndParent_1.typeAndParent.apply(context, [model]),
        /**
         *
         *
         * @category Member Partials
         */
        typeArguments: (model, options) => member_typeArguments_1.typeArguments.apply(context, [model, options]),
        /**
         *
         *
         * @category Member Partials
         */
        typeDeclaration: (model, options) => member_typeDeclaration_1.typeDeclaration.apply(context, [model, options]),
        /**
         *
         *
         * @category Member Partials
         */
        typeDeclarationList: (model, headingLevel) => member_typeDeclarationList_1.typeDeclarationList.apply(context, [model, headingLevel]),
        /**
         *
         *
         * @category Member Partials
         */
        typeDeclarationTable: (model) => member_typeDeclarationTable_1.typeDeclarationTable.apply(context, [model]),
        /**
         *
         *
         * @category Member Partials
         */
        typeParametersList: (model) => member_typeParametersList_1.typeParametersList.apply(context, [model]),
        /**
         *
         *
         * @category Member Partials
         */
        typeParametersTable: (model) => member_typeParametersTable_1.typeParametersTable.apply(context, [model]),
        /**
         *
         *
         * @category Page Partials
         */
        breadcrumbs: () => page_breadcrumbs_1.breadcrumbs.apply(context, []),
        /**
         *
         *
         * @category Page Partials
         */
        footer: () => page_footer_1.footer.apply(context, []),
        /**
         *
         *
         * @category Page Partials
         */
        header: () => page_header_1.header.apply(context, []),
        /**
         *
         *
         * @category Page Partials
         */
        packagesIndex: (model) => page_packagesIndex_1.packagesIndex.apply(context, [model]),
        /**
         *
         *
         * @category Page Partials
         */
        pageTitle: () => page_pageTitle_1.pageTitle.apply(context, []),
        /**
         *
         *
         * @category Type Partials
         */
        arrayType: (model) => type_array_1.arrayType.apply(context, [model]),
        /**
         *
         *
         * @category Type Partials
         */
        conditionalType: (model) => type_conditional_1.conditionalType.apply(context, [model]),
        /**
         *
         *
         * @category Type Partials
         */
        indexAccessType: (model) => type_index_access_1.indexAccessType.apply(context, [model]),
        /**
         *
         *
         * @category Type Partials
         */
        inferredType: (model) => type_inferred_1.inferredType.apply(context, [model]),
        /**
         *
         *
         * @category Type Partials
         */
        intersectionType: (model) => type_intersection_1.intersectionType.apply(context, [model]),
        /**
         *
         *
         * @category Type Partials
         */
        intrinsicType: (model) => type_intrinsic_1.intrinsicType.apply(context, [model]),
        /**
         *
         *
         * @category Type Partials
         */
        literalType: (model) => type_literal_1.literalType.apply(context, [model]),
        /**
         *
         *
         * @category Type Partials
         */
        namedTupleType: (model) => type_named_tuple_1.namedTupleType.apply(context, [model]),
        /**
         *
         *
         * @category Type Partials
         */
        queryType: (model) => type_query_1.queryType.apply(context, [model]),
        /**
         *
         *
         * @category Type Partials
         */
        referenceType: (model) => type_reference_1.referenceType.apply(context, [model]),
        /**
         *
         *
         * @category Type Partials
         */
        declarationType: (model) => type_reflection_declaration_1.declarationType.apply(context, [model]),
        /**
         *
         *
         * @category Type Partials
         */
        functionType: (model, options) => type_reflection_function_1.functionType.apply(context, [model, options]),
        /**
         *
         *
         * @category Type Partials
         */
        reflectionType: (model, options) => type_reflection_1.reflectionType.apply(context, [model, options]),
        /**
         * Takes a generic Type and returns the appropriate partial for it.
         *
         * @category Type Partials
         */
        someType: (model) => type_some_1.someType.apply(context, [model]),
        /**
         *
         *
         * @category Type Partials
         */
        tupleType: (model) => type_tuple_1.tupleType.apply(context, [model]),
        /**
         *
         *
         * @category Type Partials
         */
        typeOperatorType: (model) => type_type_operator_1.typeOperatorType.apply(context, [model]),
        /**
         *
         *
         * @category Type Partials
         */
        unionType: (model) => type_union_1.unionType.apply(context, [model]),
        /**
         *
         *
         * @category Type Partials
         */
        unknownType: (model) => type_unknown_1.unknownType.apply(context, [model]),
    };
};
exports.partials = partials;
const helpers = (context) => {
    return {
        getDeclarationComment: (model) => get_declaration_comment_1.getDeclarationComment.apply(context, [model]),
        getDeclarationType: (model) => get_declaration_type_1.getDeclarationType.apply(context, [model]),
        getFlattenedDeclarations: (model, options) => get_flattened_declarations_1.getFlattenedDeclarations.apply(context, [
            model,
            options,
        ]),
        getHierarchyType: (model, options) => get_hierarchy_type_1.getHierarchyType.apply(context, [model, options]),
        getKeyword: (model) => get_keyword_1.getKeyword.apply(context, [model]),
        getModifier: (model) => get_modifier_1.getModifier.apply(context, [model]),
        getParameterDefaultValue: (model) => get_parameter_default_value_1.getParameterDefaultValue.apply(context, [model]),
        getPropertyDefaultValue: (model) => get_property_default_value_1.getPropertyDefaultValue.apply(context, [model]),
        getReturnType: (model) => get_return_type_1.getReturnType.apply(context, [model]),
        isGroupKind: (model) => is_group_kind_1.isGroupKind.apply(context, [model]),
    };
};
exports.helpers = helpers;
