"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.memberWithGroups = void 0;
const markdown_1 = require("../../../libs/markdown");
/**
 * Renders a top-level member that contains group and child members such as Classes, Interfaces and Enums.
 *
 * @category Member Partials
 */
function memberWithGroups(model, options) {
    const md = [];
    if (model.comment) {
        md.push(this.partials.comment(model.comment, {
            headingLevel: options.headingLevel,
        }));
    }
    if (model.typeHierarchy?.next) {
        md.push(this.partials.hierarchy(model.typeHierarchy, {
            headingLevel: options.headingLevel,
        }));
    }
    if (model.typeParameters?.length) {
        md.push((0, markdown_1.heading)(options.headingLevel, this.getText('kind.typeParameter.plural')));
        if (this.options.getValue('parametersFormat') === 'table') {
            md.push(this.partials.typeParametersTable(model.typeParameters));
        }
        else {
            md.push(this.partials.typeParametersList(model.typeParameters));
        }
    }
    if (model.implementedTypes?.length) {
        md.push((0, markdown_1.heading)(options.headingLevel, this.getText('label.implements')));
        md.push((0, markdown_1.unorderedList)(model.implementedTypes.map((implementedType) => this.partials.someType(implementedType))));
    }
    if ('signatures' in model && model.signatures?.length) {
        model.signatures.forEach((signature) => {
            md.push(this.partials.signature(signature, {
                headingLevel: options.headingLevel,
            }));
        });
    }
    if ('indexSignature' in model && model.indexSignature) {
        md.push((0, markdown_1.heading)(options.headingLevel, this.getText('label.indexable')));
        md.push(this.partials.indexSignature(model.indexSignature));
    }
    if (model?.groups?.some((group) => group.allChildrenHaveOwnDocument())) {
        md.push((0, markdown_1.heading)(options.headingLevel, this.getText('label.index')));
        md.push(this.partials.reflectionIndex(model, {
            headingLevel: options.headingLevel + 1,
        }));
    }
    md.push(this.partials.body(model, { headingLevel: options.headingLevel }));
    return md.join('\n\n');
}
exports.memberWithGroups = memberWithGroups;
