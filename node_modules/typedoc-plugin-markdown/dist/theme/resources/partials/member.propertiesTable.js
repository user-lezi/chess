"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.declarationsTable = void 0;
const markdown_1 = require("../../../libs/markdown");
const utils_1 = require("../../../libs/utils");
const get_property_default_value_1 = require("../helpers/get-property-default-value");
/**
 * Renders a collection of properties in a table.
 *
 * There is no association list partial for properties as these are handled as a standard list of members.
 *
 * @category Member Partials
 *
 */
function declarationsTable(model, options) {
    const modifiers = model.map((param) => this.helpers.getModifier(param)?.toString());
    const hasModifiers = modifiers.some((value) => Boolean(value));
    const flags = model.map((param) => this.partials.reflectionFlags(param));
    const hasFlags = flags.some((value) => Boolean(value));
    const hasOverrides = model.some((prop) => Boolean(prop.overwrites));
    const hasInheritance = model.some((prop) => Boolean(prop.inheritedFrom));
    const hasDefaults = model.some((prop) => Boolean((0, get_property_default_value_1.getPropertyDefaultValue)(prop)));
    const hasComments = model.some((prop) => prop.comment?.blockTags?.length || prop?.comment?.summary?.length);
    const headers = [];
    headers.push(options?.isEventProps
        ? this.getText('kind.event.singular')
        : this.getText('kind.property.singular'));
    if (hasModifiers) {
        headers.push(this.getText('label.modifier'));
    }
    if (hasFlags) {
        headers.push(this.getText('label.flags'));
    }
    headers.push(this.getText('label.type'));
    if (hasDefaults) {
        headers.push(this.getText('label.defaultValue'));
    }
    if (hasComments) {
        headers.push(this.getText('label.description'));
    }
    if (hasOverrides) {
        headers.push(this.getText('label.overrides'));
    }
    if (hasInheritance) {
        headers.push(this.getText('label.inheritedFrom'));
    }
    const rows = [];
    const declarations = this.helpers.getFlattenedDeclarations(model);
    declarations.forEach((property, index) => {
        const propertyType = this.helpers.getDeclarationType(property);
        const row = [];
        const nameColumn = [];
        if (this.options.getValue('useHTMLAnchors') && property.anchor) {
            nameColumn.push(`<a id="${property.anchor}" name="${property.anchor}"></a>`);
        }
        const propertyName = `${property.name}${property.flags.isOptional ? '?' : ''}`;
        if (property.isDeprecated && property.isDeprecated()) {
            nameColumn.push((0, markdown_1.strikeThrough)((0, markdown_1.backTicks)(propertyName)));
        }
        else {
            nameColumn.push((0, markdown_1.backTicks)(propertyName));
        }
        row.push(nameColumn.join(' '));
        if (hasModifiers) {
            row.push((0, markdown_1.backTicks)(modifiers[index] || 'public'));
        }
        if (hasFlags) {
            row.push(flags[index]);
        }
        if (propertyType) {
            const type = propertyType.declaration?.signatures?.length
                ? this.partials.functionType(propertyType?.declaration?.signatures, { forceParameterType: true })
                : this.partials.someType(propertyType);
            row.push((0, utils_1.removeLineBreaks)(type));
        }
        if (hasDefaults) {
            row.push((0, utils_1.formatTableColumn)((0, get_property_default_value_1.getPropertyDefaultValue)(property) || (0, markdown_1.backTicks)('undefined')));
        }
        if (hasComments) {
            const hasComment = property.comment?.blockTags?.length ||
                property?.comment?.summary?.length;
            const comments = property?.comment;
            if (hasComment && comments) {
                row.push(this.partials.comment(comments, { isTableColumn: true }));
            }
            else {
                row.push('-');
            }
        }
        if (hasOverrides) {
            row.push(this.partials.inheritance(property, { headingLevel: -1 }) || '-');
        }
        if (hasInheritance) {
            row.push(this.partials.inheritance(property, { headingLevel: -1 }) || '-');
        }
        rows.push(row);
    });
    return (0, markdown_1.table)(headers, rows);
}
exports.declarationsTable = declarationsTable;
