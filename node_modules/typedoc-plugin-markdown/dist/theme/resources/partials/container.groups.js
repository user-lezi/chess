"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.groups = void 0;
const markdown_1 = require("../../../libs/markdown");
const text_mappings_1 = require("../../../options/text-mappings");
const typedoc_1 = require("typedoc");
/**
 * Renders a collection of reflection groups.
 *
 * @category Container Partials
 */
function groups(model, options) {
    const groupsWithChildren = model?.filter((group) => !group.allChildrenHaveOwnDocument());
    const md = [];
    const getGroupTitle = (groupTitle) => {
        const key = text_mappings_1.PLURAL_KIND_KEY_MAP[groupTitle];
        return this.getText(key) || groupTitle;
    };
    groupsWithChildren?.forEach((group, index) => {
        if (group.categories) {
            md.push((0, markdown_1.heading)(options.headingLevel, getGroupTitle(group.title)));
            if (group.description) {
                md.push(this.partials.commentParts(group.description));
            }
            md.push(this.partials.categories(group.categories, {
                headingLevel: options.headingLevel + 1,
            }));
        }
        else {
            const isPropertiesGroup = group.children.every((child) => child.kind === typedoc_1.ReflectionKind.Property);
            const isEnumGroup = group.children.every((child) => child.kind === typedoc_1.ReflectionKind.EnumMember);
            md.push((0, markdown_1.heading)(options.headingLevel, getGroupTitle(group.title)));
            if (group.description) {
                md.push(this.partials.commentParts(group.description));
            }
            if (isPropertiesGroup &&
                this.options.getValue('propertiesFormat') === 'table') {
                md.push(this.partials.declarationsTable(group.children, {
                    isEventProps: getGroupTitle(group.title) === this.getText('kind.event.plural'),
                }));
            }
            else if (isEnumGroup &&
                this.options.getValue('enumMembersFormat') === 'table') {
                md.push(this.partials.enumMembersTable(group.children));
            }
            else {
                if (group.children) {
                    md.push(this.partials.members(group.children, {
                        headingLevel: options.headingLevel + 1,
                    }));
                }
            }
        }
    });
    return md.join('\n\n');
}
exports.groups = groups;
