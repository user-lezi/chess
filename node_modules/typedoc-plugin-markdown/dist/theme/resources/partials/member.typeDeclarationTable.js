"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.typeDeclarationTable = void 0;
const markdown_1 = require("../../../libs/markdown");
const utils_1 = require("../../../libs/utils");
/**
 * @category Member Partials
 */
function typeDeclarationTable(model) {
    const headers = [];
    const declarations = this.helpers.getFlattenedDeclarations(model, {
        includeSignatures: true,
    });
    const hasComments = declarations.some((declaration) => Boolean(declaration.comment));
    const hasDefaultValues = declarations.some((declaration) => Boolean(declaration.defaultValue));
    headers.push(this.getText('label.member'));
    headers.push(this.getText('label.type'));
    if (hasDefaultValues) {
        headers.push(this.getText('label.value'));
    }
    if (hasComments) {
        headers.push(this.getText('label.description'));
    }
    const rows = [];
    declarations.forEach((declaration, index) => {
        const row = [];
        row.push((0, markdown_1.backTicks)(declaration.name));
        row.push(this.partials.someType(declaration.type));
        if (hasDefaultValues) {
            row.push((0, utils_1.escapeChars)(!declaration.defaultValue ? '-' : declaration.defaultValue));
        }
        if (hasComments) {
            const comments = declaration.comment;
            if (comments) {
                row.push(this.partials.comment(comments, { isTableColumn: true }));
            }
            else {
                row.push('-');
            }
        }
        rows.push(row);
    });
    return (0, markdown_1.table)(headers, rows);
}
exports.typeDeclarationTable = typeDeclarationTable;
