"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.signature = void 0;
const markdown_1 = require("../../../libs/markdown");
const typedoc_1 = require("typedoc");
/**
 * Renders a signature member.
 *
 * @category Member Partials
 */
function signature(model, options) {
    const md = [];
    md.push(this.partials.reflectionFlags(model));
    if (!options.nested) {
        md.push(this.partials.signatureTitle(model, {
            accessor: options.accessor,
        }));
    }
    if (model.comment) {
        md.push(this.partials.comment(model.comment, {
            headingLevel: options.headingLevel,
            showTags: false,
        }));
    }
    if (model.typeParameters?.length &&
        model.kind !== typedoc_1.ReflectionKind.ConstructorSignature) {
        md.push((0, markdown_1.heading)(options.headingLevel, this.getText('kind.typeParameter.plural')));
        if (this.options.getValue('parametersFormat') === 'table') {
            md.push(this.partials.typeParametersTable(model.typeParameters));
        }
        else {
            md.push(this.partials.typeParametersList(model.typeParameters));
        }
    }
    if (model.parameters?.length) {
        md.push((0, markdown_1.heading)(options.headingLevel, this.getText('kind.parameter.plural')));
        if (this.options.getValue('parametersFormat') === 'table') {
            md.push(this.partials.parametersTable(model.parameters));
        }
        else {
            md.push(this.partials.parametersList(model.parameters));
        }
    }
    if (model.type) {
        md.push(this.partials.signatureReturns(model, {
            headingLevel: options.headingLevel,
        }));
    }
    md.push(this.partials.inheritance(model, { headingLevel: options.headingLevel }));
    if (model.comment) {
        md.push(this.partials.comment(model.comment, {
            headingLevel: options.headingLevel,
            showSummary: false,
        }));
    }
    if (!options.nested &&
        model.sources &&
        !this.options.getValue('disableSources')) {
        md.push(this.partials.sources(model, { headingLevel: options.headingLevel }));
    }
    return md.join('\n\n');
}
exports.signature = signature;
