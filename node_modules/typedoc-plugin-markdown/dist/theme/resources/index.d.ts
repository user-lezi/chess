import { MarkdownThemeContext } from '../index.js';
import { ArrayType, Comment, CommentDisplayPart, ConditionalType, ContainerReflection, DeclarationHierarchy, DeclarationReflection, IndexedAccessType, InferredType, IntersectionType, IntrinsicType, LiteralType, NamedTupleMember, ParameterReflection, ProjectReflection, QueryType, ReferenceReflection, ReferenceType, Reflection, ReflectionCategory, ReflectionGroup, ReflectionKind, ReflectionType, SignatureReflection, SomeType, TupleType, TypeOperatorType, TypeParameterReflection, UnionType, UnknownType } from 'typedoc';
export declare const templates: (context: MarkdownThemeContext) => {
    /**
     * Template that maps to the root project reflection. This will be the index page / documentation root page.
     *
     */
    project: () => string;
    /**
     * Template that specifically maps to the resolved readme file. This template is not used when 'readme' is set to 'none'.
     *
     */
    readme: () => string;
    /**
     * Template that maps to individual reflection models.
     *
     */
    reflection: () => string;
};
export declare const partials: (context: MarkdownThemeContext) => {
    /**
     *
     *
     * @category Comment Partials
     */
    comment: (model: Comment, options?: {
        headingLevel?: number | undefined;
        showSummary?: boolean | undefined;
        showTags?: boolean | undefined;
        isTableColumn?: boolean | undefined;
    }) => string;
    /**
     *
     *
     * @category Comment Partials
     */
    commentParts: (model: CommentDisplayPart[]) => string;
    /**
     *
     *
     * @category Container Partials
     */
    body: (model: ContainerReflection, options: {
        headingLevel: number;
    }) => string;
    /**
     * Renders a collection of reflection categories.
     *
     * @category Container Partials
     */
    categories: (model: ReflectionCategory[], options: {
        headingLevel: number;
    }) => string;
    /**
     * Renders a collection of reflection groups.
     *
     * @category Container Partials
     */
    groups: (model: ReflectionGroup[], options: {
        headingLevel: number;
    }) => string;
    /**
     * Renders a collection of members.
     *
     * @category Container Partials
     */
    members: (model: DeclarationReflection[], options: {
        headingLevel: number;
    }) => string;
    /**
     * Renders an accessor member.
     *
     * @category Member Partials
     */
    accessor: (model: DeclarationReflection, options: {
        headingLevel: number;
    }) => string;
    /**
     * Renders an constructor member.
     *
     * @category Member Partials
     */
    constructor: (model: DeclarationReflection, options: {
        headingLevel: number;
    }) => string;
    /**
     * Renders a standard declaration member.
     *
     * @category Member Partials
     */
    declaration: (model: DeclarationReflection, options?: {
        headingLevel: number;
        nested?: boolean | undefined;
    }) => string;
    /**
     * Remders a declaration title.
     *
     * @category Member Partials
     */
    declarationTitle: (model: DeclarationReflection) => string;
    /**
     * Renders enum members as a table.
     *
     * @category Member Partials
     */
    enumMembersTable: (model: DeclarationReflection[]) => string;
    /**
     *
     *
     * @category Member Partials
     */
    hierarchy: (model: DeclarationHierarchy, options: {
        headingLevel: number;
    }) => string;
    /**
     * Renders an index signature block
     *
     * @category Member Partials
     */
    indexSignature: (model: SignatureReflection) => string;
    /**
     * Renders an inheritance section.
     *
     * @category Member Partials
     */
    inheritance: (model: DeclarationReflection | SignatureReflection, options: {
        headingLevel: number;
    }) => string;
    /**
     * Renders the main member title.
     *
     * @category Member Partials
     */
    memberTitle: (model: DeclarationReflection) => string;
    /**
     * Renders a top-level member that contains group and child members such as Classes, Interfaces and Enums.
     *
     * @category Member Partials
     */
    memberWithGroups: (model: DeclarationReflection, options: {
        headingLevel: number;
    }) => string;
    /**
     *
     *
     * @category Member Partials
     */
    parametersList: (model: ParameterReflection[]) => string;
    /**
     *
     *
     * @category Member Partials
     */
    parametersTable: (model: ParameterReflection[]) => string;
    /**
 * Renders a collection of properties in a table.

There is no association list partial for properties as these are handled as a standard list of members.
 *
 * @category Member Partials
 *
 */
    declarationsTable: (model: DeclarationReflection[], options?: {
        isEventProps: boolean;
    } | undefined) => string;
    /**
     * Renders an reference member.
     *
     * @category Member Partials
     */
    referenceMember: (model: ReferenceReflection) => string;
    /**
     * Renders the flags of a reflection.
     *
     * @category Member Partials
     */
    reflectionFlags: (model: Reflection) => string;
    /**
     * Renders the index section of a reflection.
     *
     * @category Member Partials
     */
    reflectionIndex: (model: DeclarationReflection | ProjectReflection, options: {
        headingLevel: number;
    }) => string;
    /**
     * Renders a signature member.
     *
     * @category Member Partials
     */
    signature: (model: SignatureReflection, options: {
        headingLevel: number;
        nested?: boolean | undefined;
        accessor?: string | undefined;
    }) => string;
    /**
     *
     *
     * @category Member Partials
     */
    signatureParameters: (model: ParameterReflection[]) => string;
    /**
     *
     *
     * @category Member Partials
     */
    signatureReturns: (model: SignatureReflection, options: {
        headingLevel: number;
    }) => string;
    /**
     *
     *
     * @category Member Partials
     */
    signatureTitle: (model: SignatureReflection, options?: {
        accessor?: string | undefined;
        includeType?: boolean | undefined;
    } | undefined) => string;
    /**
     *
     *
     * @category Member Partials
     */
    sources: (model: DeclarationReflection | SignatureReflection, options: {
        headingLevel: number;
    }) => string;
    /**
     *
     *
     * @category Member Partials
     */
    member: (model: DeclarationReflection, options: {
        headingLevel: number;
        nested?: boolean | undefined;
    }) => string;
    /**
     *
     *
     * @category Member Partials
     */
    typeAndParent: (model: ArrayType | ReferenceType) => string;
    /**
     *
     *
     * @category Member Partials
     */
    typeArguments: (model: SomeType[], options?: {
        foreCollpase?: boolean | undefined;
    } | undefined) => string;
    /**
     *
     *
     * @category Member Partials
     */
    typeDeclaration: (model: DeclarationReflection[], options: {
        headingLevel: number;
    }) => string;
    /**
     *
     *
     * @category Member Partials
     */
    typeDeclarationList: (model: DeclarationReflection[], headingLevel: number) => string;
    /**
     *
     *
     * @category Member Partials
     */
    typeDeclarationTable: (model: DeclarationReflection[]) => string;
    /**
     *
     *
     * @category Member Partials
     */
    typeParametersList: (model: TypeParameterReflection[]) => string;
    /**
     *
     *
     * @category Member Partials
     */
    typeParametersTable: (model: TypeParameterReflection[]) => string;
    /**
     *
     *
     * @category Page Partials
     */
    breadcrumbs: () => string;
    /**
     *
     *
     * @category Page Partials
     */
    footer: () => string;
    /**
     *
     *
     * @category Page Partials
     */
    header: () => string;
    /**
     *
     *
     * @category Page Partials
     */
    packagesIndex: (model: ProjectReflection) => string;
    /**
     *
     *
     * @category Page Partials
     */
    pageTitle: () => string;
    /**
     *
     *
     * @category Type Partials
     */
    arrayType: (model: ArrayType) => string;
    /**
     *
     *
     * @category Type Partials
     */
    conditionalType: (model: ConditionalType) => string;
    /**
     *
     *
     * @category Type Partials
     */
    indexAccessType: (model: IndexedAccessType) => string;
    /**
     *
     *
     * @category Type Partials
     */
    inferredType: (model: InferredType) => string;
    /**
     *
     *
     * @category Type Partials
     */
    intersectionType: (model: IntersectionType) => string;
    /**
     *
     *
     * @category Type Partials
     */
    intrinsicType: (model: IntrinsicType) => string;
    /**
     *
     *
     * @category Type Partials
     */
    literalType: (model: LiteralType) => string;
    /**
     *
     *
     * @category Type Partials
     */
    namedTupleType: (model: NamedTupleMember) => string;
    /**
     *
     *
     * @category Type Partials
     */
    queryType: (model: QueryType) => string;
    /**
     *
     *
     * @category Type Partials
     */
    referenceType: (model: ReferenceType) => string;
    /**
     *
     *
     * @category Type Partials
     */
    declarationType: (model: DeclarationReflection) => string;
    /**
     *
     *
     * @category Type Partials
     */
    functionType: (model: SignatureReflection[], options?: {
        forceParameterType: boolean;
    } | undefined) => string;
    /**
     *
     *
     * @category Type Partials
     */
    reflectionType: (model: ReflectionType, options?: {
        foreCollpase?: boolean | undefined;
    } | undefined) => string;
    /**
     * Takes a generic Type and returns the appropriate partial for it.
     *
     * @category Type Partials
     */
    someType: (model?: SomeType | undefined) => string;
    /**
     *
     *
     * @category Type Partials
     */
    tupleType: (model: TupleType) => string;
    /**
     *
     *
     * @category Type Partials
     */
    typeOperatorType: (model: TypeOperatorType) => string;
    /**
     *
     *
     * @category Type Partials
     */
    unionType: (model: UnionType) => string;
    /**
     *
     *
     * @category Type Partials
     */
    unknownType: (model: UnknownType) => string;
};
export declare const helpers: (context: MarkdownThemeContext) => {
    getDeclarationComment: (model: DeclarationReflection) => any;
    getDeclarationType: (model: DeclarationReflection) => SomeType | undefined;
    getFlattenedDeclarations: (model: DeclarationReflection[], options?: {
        includeSignatures: boolean;
    } | undefined) => DeclarationReflection[];
    getHierarchyType: (model: SomeType, options?: {
        isTarget: boolean;
    } | undefined) => string;
    getKeyword: (model: ReflectionKind) => string;
    getModifier: (model: DeclarationReflection) => string | null;
    getParameterDefaultValue: (model: ParameterReflection) => string;
    getPropertyDefaultValue: (model: DeclarationReflection) => string | null;
    getReturnType: (model?: SomeType | undefined) => string;
    isGroupKind: (model: DeclarationReflection | SignatureReflection) => boolean;
};
