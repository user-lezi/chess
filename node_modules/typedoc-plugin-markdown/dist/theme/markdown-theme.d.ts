import { MarkdownRenderer } from '../app/application';
import { MarkdownPageEvent } from '../app/events';
import { OutputFileStrategy, TextContentMappings } from '../options/index.js';
import { RenderTemplate } from './index.js';
import { DeclarationReflection, ProjectReflection, Reflection, ReflectionKind, Theme } from 'typedoc';
import { MarkdownThemeContext } from './markdown-themecontext';
/**
 * The main theme class for the plugin.
 *
 * The class controls how TypeDoc models are mapped to files and templates and extends TypeDoc's base Theme class.
 *
 * You would typically only be interested in overriding the the theme's render context instance.
 *
 * The API follows the implementation of [TypeDoc's custom theming](https://github.com/TypeStrong/typedoc/blob/master/internal-docs/custom-themes.md) with some minor adjustments.
 *
 * @usage
 *
 * ```ts
 * export function load(app) {
 *   app.renderer.defineTheme('customTheme', MyMarkdownTheme);
 * }
 *
 * class MyMarkdownTheme extends MarkdownTheme {
 *  ...
 * }
 * ```
 *
 * @category Theme
 */
export declare class MarkdownTheme extends Theme {
    /**
     * The text content mappings for the theme. This is a combination of the default mappings and any mappings provided in the plugin options.
     *
     * @internal
     */
    readonly textContentMappings: Partial<TextContentMappings>;
    /**
     * @ignore
     */
    constructor(renderer: MarkdownRenderer);
    /**
     * Renders a template and page model to a string.
     *
     * @internal
     */
    render(page: MarkdownPageEvent<Reflection>, template: RenderTemplate<MarkdownPageEvent<Reflection>>): string;
    /**
     * Creates a new instance of the current theme context.
     *
     * This method can be overridden to provide an alternative theme context.
     */
    getRenderContext(page: MarkdownPageEvent<Reflection>): MarkdownThemeContext;
    /**
     * Maps the models of the given project to the desired output files.
     *
     * This method can be overriden to provide an alternative url structure.
     */
    getUrls(project: ProjectReflection): import("./index.js").UrlMapping<Reflection>[];
    /**
     * Map the models of the given project to a navigation structure.
     *
     * This method can be overriden to provide an alternative navigation structure.
     */
    getNavigation(project: ProjectReflection): import("./index.js").NavigationItem[];
    /**
     * @internal
     */
    getTemplateMapping(kind: ReflectionKind, outputFileStrategy?: OutputFileStrategy): any;
    /**
     * @internal
     */
    readmeTemplate: (page: MarkdownPageEvent<ProjectReflection>) => string;
    /**
     * @internal
     */
    projectTemplate: (page: MarkdownPageEvent<ProjectReflection>) => string;
    /**
     * @internal
     */
    reflectionTemplate: (page: MarkdownPageEvent<DeclarationReflection>) => string;
}
