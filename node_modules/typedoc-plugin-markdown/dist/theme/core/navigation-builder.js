"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildNavigation = void 0;
const options_1 = require("../../options/index.js");
const path = __importStar(require("path"));
const typedoc_1 = require("typedoc");
function buildNavigation(theme, project) {
    const options = theme.application.options;
    const navigationOptions = options.getValue('navigationModel');
    const navigation = [];
    const packagesMeta = theme.application.renderer
        .packagesMeta;
    const isPackages = options.getValue('entryPointStrategy') === typedoc_1.EntryPointStrategy.Packages;
    if (isPackages) {
        if (Object.keys(packagesMeta)?.length === 1) {
            buildNavigationFromProject(project);
        }
        else {
            project.children?.forEach((projectChild) => {
                buildNavigationFromPackage(projectChild);
            });
        }
    }
    else {
        buildNavigationFromProject(project);
    }
    return navigation;
    function buildNavigationFromPackage(projectChild) {
        const fileExtension = options.getValue('fileExtension');
        const entryFileName = `${path.parse(options.getValue('entryFileName')).name}${fileExtension}`;
        const preservePackageReadme = Boolean(projectChild.readme) && !options.getValue('mergeReadme');
        const packageOptions = packagesMeta[projectChild.name]?.options;
        const outputFileStrategy = packageOptions?.isSet('outputFileStrategy')
            ? packageOptions.getValue('outputFileStrategy')
            : options.getValue('outputFileStrategy');
        const entryModule = packageOptions?.isSet('entryModule')
            ? packageOptions.getValue('entryModule')
            : options.getValue('entryModule');
        const projectChildUrl = preservePackageReadme
            ? `${path.dirname(projectChild.url)}/${entryFileName}`
            : projectChild.url;
        const isModulesGroup = projectChild?.groups &&
            projectChild?.groups[0].children.every((child) => child.kind === typedoc_1.ReflectionKind.Module);
        const children = [];
        if (preservePackageReadme &&
            !isModulesGroup &&
            outputFileStrategy === options_1.OutputFileStrategy.Modules) {
            children.push({
                title: theme.textContentMappings['label.globals'],
                path: projectChild.url,
                kind: projectChild.kind,
            });
        }
        const childGroups = getChildrenOrGroups(projectChild, outputFileStrategy);
        if (childGroups) {
            children.push(...childGroups.filter((child) => child.title !== entryModule));
        }
        navigation.push({
            title: projectChild.name,
            kind: projectChild.kind,
            children,
            ...(projectChildUrl && { path: projectChildUrl }),
        });
    }
    function buildNavigationFromProject(project) {
        const entryModule = options.getValue('entryModule');
        if (!navigationOptions.excludeCategories && project.categories?.length) {
            navigation.push(...project.categories.map((category) => {
                return {
                    title: category.title,
                    children: getCategoryGroupChildren(category),
                };
            }));
        }
        else {
            if (project.groups?.length) {
                const isEntryModule = Boolean(project?.groups[0]?.children.find((child) => child.name === entryModule));
                const isOnlyModules = project.children?.every((child) => child.kind === typedoc_1.ReflectionKind.Module);
                if ((project.groups.length === 1 && !Boolean(isEntryModule)) ||
                    isOnlyModules) {
                    const children = getGroupChildren(project.groups[0]);
                    if (children?.length) {
                        navigation.push(...children.filter((child) => child.title !== entryModule));
                    }
                }
                else {
                    project.groups?.forEach((projectGroup) => {
                        const children = getGroupChildren(projectGroup);
                        const indexModule = projectGroup.children.find((child) => child.name === entryModule);
                        if (children?.length) {
                            navigation.push({
                                title: theme.textContentMappings[options_1.PLURAL_KIND_KEY_MAP[projectGroup.title]] || projectGroup.title,
                                children: children.filter((child) => child.title !== entryModule),
                            });
                        }
                        if (indexModule) {
                            const children = getChildrenOrGroups(indexModule);
                            if (children) {
                                navigation.push(...children);
                            }
                        }
                    });
                }
            }
        }
    }
    function getCategoryGroupChildren(group) {
        return group.children
            ?.filter((child) => child.hasOwnDocument)
            .map((child) => {
            const children = getChildrenOrGroups(child);
            return {
                title: child.name,
                kind: child.kind,
                url: child.url,
                ...(children && { children }),
            };
        });
    }
    function getGroupChildren(group, outputFileStrategy) {
        if (!navigationOptions.excludeCategories && group?.categories?.length) {
            return group.categories?.map((category) => {
                return {
                    title: category.title,
                    children: getCategoryGroupChildren(category),
                };
            });
        }
        return group.children
            ?.filter((child) => child.hasOwnDocument)
            .reduce((acc, child) => {
            const mapping = theme.getTemplateMapping(child.kind, outputFileStrategy);
            if (Boolean(mapping)) {
                const children = !navigationOptions.excludeCategories && child.categories?.length
                    ? child.categories
                        ?.map((category) => {
                        const catChildren = getCategoryGroupChildren(category);
                        return catChildren.length
                            ? {
                                title: category.title,
                                children: catChildren,
                            }
                            : null;
                    })
                        .filter((cat) => Boolean(cat))
                    : getChildrenOrGroups(child, outputFileStrategy);
                return processChildren(acc, child, children);
            }
        }, []);
    }
    function getChildrenOrGroups(reflection, outputFileStrategy) {
        if (reflection.groups?.some((group) => group.allChildrenHaveOwnDocument())) {
            if (navigationOptions.excludeGroups) {
                return reflection.children
                    ?.filter((child) => child.hasOwnDocument)
                    .reduce((acc, child) => {
                    const children = getChildrenOrGroups(child, outputFileStrategy);
                    return processChildren(acc, child, children);
                }, []);
            }
            const isModulesGroup = reflection.groups[0].children.every((child) => child.kind === typedoc_1.ReflectionKind.Module);
            if (isModulesGroup) {
                return (getGroupChildren(reflection.groups[0], outputFileStrategy) || null);
            }
            return reflection.groups
                ?.map((group) => {
                const groupChildren = getGroupChildren(group, outputFileStrategy);
                return groupChildren?.length
                    ? {
                        title: theme.textContentMappings[options_1.PLURAL_KIND_KEY_MAP[group.title]] ||
                            group.title,
                        children: groupChildren || null,
                    }
                    : null;
            })
                .filter((group) => Boolean(group));
        }
        return null;
    }
    function processChildren(acc, child, children) {
        if (!navigationOptions.excludeFolders) {
            const titleParts = child.name.split('/');
            if (!child.name.startsWith('@') && titleParts.length > 1) {
                let currentLevel = acc;
                let currentItem;
                for (let i = 0; i < titleParts.length - 1; i++) {
                    currentItem = currentLevel?.find((item) => item.title === titleParts[i]);
                    if (!currentItem) {
                        currentItem = {
                            title: titleParts[i],
                            children: [],
                        };
                        currentLevel.push(currentItem);
                    }
                    if (currentItem) {
                        currentLevel = currentItem.children || [];
                    }
                }
                currentLevel.push({
                    title: titleParts[titleParts.length - 1],
                    kind: child.kind,
                    path: child.url,
                    ...(children && { children }),
                });
                return acc;
            }
        }
        acc.push({
            title: child.name,
            kind: child.kind,
            path: child.url,
            ...(children && { children }),
        });
        return acc;
    }
}
exports.buildNavigation = buildNavigation;
